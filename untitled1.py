# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tMVPFVxgftB6bXqPE_iXoyZCfcnUoQky
"""

from google.colab.patches import cv2_imshow
import cv2
image=cv2.imread('/content/dha.jpg')
cv2_imshow(image)
cv2.waitkey(0)
cv2.destroyAllWindows()
cv2.imwrite('output.jpg',image)

from google.colab import drive
drive.mount('/content/drive')





import cv2
from google.colab.patches import cv2_imshow
image =cv2.imread('/content/dha2.jpg')
cv2_imshow(image)
height,width,channels=image.shape
print(f"Image width:{width}pixels")
print(f"Image height:{height}pixels")
print(f"Number of channels:{channels}")

image_size=image.size
print(f"total pixels:{image_size}")

resized_image=cv2.resize(image,(700,489))
cv2_imshow(resized_image)

gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
cv2_imshow(gray)

hsv=cv2.cvtColor(image,cv2.COLOR_BGR2HSV)
cv2_imshow(hsv)

cropped=image[50:400,50:400]
cv2_imshow(cropped)

cv2.rectangle(image,(50,50),(400,400),(0,255.0),3)

cv2.circle(image,(250,250),50,(255,0,0),3)

"""import cv2
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/dha2.jpg',0)
_, global_threshold=cv2.threshold(image,100,255,cv2.THRESH_BINARY)
cv2_imshow(global_threshold)
"""

import cv2
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/dha2.jpg',0)
_, global_threshold=cv2.threshold(image,100,255,cv2.THRESH_BINARY)
cv2_imshow(global_threshold)

adaptive_threshold=cv2.adaptiveThreshold(image,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,2)
cv2_imshow(adaptive_threshold)

adaptive_thresh_gaussian=cv2.adaptiveThreshold(image,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)
cv2_imshow(adaptive_thresh_gaussian)

_,otsu_threshold=cv2.threshold(image,0,280,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
cv2_imshow(otsu_threshold)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
image=cv2.imread('/content/supra.png')
kernel_size=9;sigma=2.5
gaussian_blur=cv2.GaussianBlur(image,(kernel_size,kernel_size),sigma)
cv2_imshow(gaussian_blur)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
kernel_size=9;sigma=2.5
gaussian_blur=cv2.GaussianBlur(img,(kernel_size,kernel_size),sigma)
cv2_imshow(gaussian_blur)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
kernel_size=9
median_blur=cv2.medianBlur(img,kernel_size)
cv2_imshow(median_blur)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/blur.jpg')
kernel_size=9
median_blur=cv2.medianBlur(img,kernel_size)
cv2_imshow(median_blur)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/blur.jpg')
d=9;sigmaColor=75;sigmaSpace=75
bilateral_blur=cv2.bilateralFilter(img,kernel_size,75,75)
cv2_imshow(bilateral_blur)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
d=9;sigmaColor=75;sigmaSpace=75
bilateral_blur=cv2.bilateralFilter(img,kernel_size,75,75)
cv2_imshow(bilateral_blur)

d=9;sigmaColor=75;sigmaSpace=75
bilateral_blur=cv2.bilateralFilter(img,kernel_size,75,75)
cv2_imshow(bilateral_blur)

"""ad=9;sigmaColor=75;sigmaSpace=75
bilateral_blur=cv2.bilateralFilter(img,kernel_size,75,75)
cv2_imshow(bilateral_blur)
"""

import cv2
from google.colab.patches import cv2_imshow=\

import numpy as np
img=cv2.imread('/content/dha2.jpg')

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
canny_edges=cv2.Canny(img,100,200)
cv2_imshow(canny_edges)



import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
canny_edges=cv2.Canny(img,100,200)
cv2_imshow(canny_edges)

import cv2
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
canny_edges=cv2.Canny(img,100,200)
cv2_imshow(canny_edges)

l1=[122,333,444,555]
l2=[2,4,5,6]
import numpy as np
c=np.array(l1)
c2=np.array(l2)
v=c/c2
v

import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread('/content/dha2.jpg')
image=cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
plt.imshow(image)
plt.title('TOYOTO')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
cv2_imshow(image)
print("my image shape is",image.shape)
height,width,channels=image.shape
print(f"Image width:{width}pixels")
print(f"Image height:{height}pixels")
print(f"Number of channels:{channels}")

import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread('/content/dha2.jpg')
(h,w)=image.shape[:2]
center=(w/2,h/2)
angle=45
scale=1.0
rotation_matrix=cv2.getRotationMatrix2D(center,angle,scale)
rotated_image=cv2.warpAffine(image,rotation_matrix,(w,h))
cv2_imshow(rotated_image)
plt.imshow(cv2.cvtColor(rotated_image,cv2.COLOR_BGR2RGB))
plt.title("rotated image(45Â°)")
plt.show()

tx,ty=50,100
translation_matrix=np.float32([[1,0,tx],[0,1,ty]])
translated_image=cv2.warpAffine(image,translation_matrix,(w,h))
plt.imshow(cv2.cvtColor(translated_image,cv2.COLOR_BGR2RGB))
plt.title("translated image")
plt.show()

flipped_horizontally=cv2.flip(image,1)
flipped_vertically=cv2.flip(image,0)
flipped_horizontally_and_vertically=cv2.flip(image,-1)
plt.subplot(1,3,1)
plt.imshow(cv2.cvtColor(flipped_vertically,cv2.COLOR_BGR2RGB))
plt.title("flipped horizontally")
plt.subplot(1,3,2)
plt.imshow(cv2.cvtColor(flipped_horizontally_and_vertically,cv2.COLOR_BGR2RGB))
plt.title("flipped vertically")
plt.subplot(1,3,3)
plt.imshow(cv2.cvtColor(flipped_horizontally,cv2.COLOR_BGR2RGB))
plt.title("flipped horizontally and vertically")
plt.show()

flipped_horizontally=cv2.flip(image,1)
flipped_vertically=cv2.flip(image,2)
flipped_both=cv2.flip(image,-1)
plt.subplot(2,2,1)
plt.imshow(cv2.cvtColor(flipped_vertically,cv2.COLOR_BGR2RGB))
plt.title("flipped horizontally")
plt.subplot(2,2,2)
plt.imshow(cv2.cvtColor(flipped_both,cv2.COLOR_BGR2RGB))
plt.title("flipped vertically")
plt.subplot(2,2,3)
plt.imshow(cv2.cvtColor(flipped_horizontally,cv2.COLOR_BGR2RGB))
plt.title("flipped both")
plt.show()

flipped_horizontally=cv2.flip(image,1)
flipped_vertically=cv2.flip(image,0)
flipped_both=cv2.flip(image,-1)
plt.subplot(2,2,1)
plt.imshow(cv2.cvtColor(image,cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.subplot(2,2,2)
plt.imshow(cv2.cvtColor(flipped_horizontally,cv2.COLOR_BGR2RGB))
plt.title("Flipped Horizontally")
plt.subplot(2,2,3)
plt.imshow(cv2.cvtColor(flipped_vertically,cv2.COLOR_BGR2RGB))
plt.title("Flipped vertically")
plt.subplot(2,2,4)
plt.imshow(cv2.cvtColor(flipped_both,cv2.COLOR_BGR2RGB))
plt.title("Flipped Both")
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
image = cv2.imread('/content/dha2.jpg')
plt.subplot(2, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
(h, w) = image.shape[:2]
center = (w // 2, h // 2)
angle = 45
scale = 1.0
rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale)
rotated_image = cv2.warpAffine(image, rotation_matrix, (w, h))
plt.subplot(2, 3, 2)
plt.imshow(cv2.cvtColor(rotated_image, cv2.COLOR_BGR2RGB))
plt.title('Rotated Image')
tx, ty = 50, 100
translation_matrix = np.float32([[1, 0, tx], [0, 1, ty]])
translated_image = cv2.warpAffine(image, translation_matrix, (w, h))
plt.subplot(2, 3, 3)
plt.imshow(cv2.cvtColor(translated_image, cv2.COLOR_BGR2RGB))
plt.title('Translated Image')
scale_percent = 50
width = int(image.shape[1] * scale_percent / 100)
height = int(image.shape[0] * scale_percent / 100)
dim = (width, height)
scaled_image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
plt.subplot(2, 3, 4)
plt.imshow(cv2.cvtColor(scaled_image, cv2.COLOR_BGR2RGB))
plt.title('Scaled Image')
rows, cols, _ = image.shape
M = np.float32([[1, 0.5, 0],
              [0, 1, 0]])
sheared_image = cv2.warpAffine(image, M, (int(cols * 1.5), rows))
plt.subplot(2, 3, 5)
plt.imshow(cv2.cvtColor(sheared_image, cv2.COLOR_BGR2RGB))
plt.title('Sheared Image')
plt.tight_layout()
plt.show()

center=(width//2,height//2)
rotation_matrix=cv2.getRotationMatrix2D(center,angle,scale)
rotated_image=cv2.warpAffine(image,rotation_matrix,(w,h))
shear_matrix=np.float32([[1,0.5,0],[0,1,0]])
sheared_image=cv2.warpAffine(image,shear_matrix,(w,h))
plt.figure(figsize=(10,5))
plt.subplot(2,3,1),plt.imshow(image),plt.title('Original Image')
plt.subplot(2,3,2),plt.imshow(rotated_image),plt.title('Rotated Image')
plt.subplot(2,3,3),plt.imshow(sheared_image),plt.title('Sheared Image')
plt.show()

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt
#image=cv2.imread('/content/dha2.jpg')
uploaded=files.upload()
filename=next(iter(uploaded))
gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
plt.subplot(2,3,2),plt.imshow(gray,cmap='gray'),plt.title('Gray Image')
thresh,binary=cv2.threshold(gray,200,255,cv2.THRESH_BINARY)
plt.subplot(2,3,3),plt.imshow(binary,cmap='gray'),plt.title('Binary Image')
contours,hierarchy=cv2.findContours(binary,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
result=image.copy()
cv2.drawContours(result,contours,-1,(0,255,0),2)
plt.subplot(2,3,4),plt.imshow(result),plt.title('Contours Image')
plt.show()
cv2_imshow(result)
print(f"Number of contours:{len(contours)}")

import cv2
from google.colab import files
from google.colab.patches import cv2_imshow
from IPython.display import clear_output
import time
video_path='/content/istockphoto-1411824263-640_adpp_is.mp4'
cap=cv2.VideoCapture(video_path)
if not cap.isOpened():
  print("error opening video file")
fps=cap.get(cv2.CAP_PROP_FPS)
delay=10/fps
while cap.isOpened():
  ret,frame=cap.read()
  if not ret:
    print("end of video")
    break
  cv2_imshow(frame)
  clear_output(wait=True)
  time.sleep(delay)
cap.release

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import numpy as np
img=cv2.imread('/content/dha2.jpg')
laplacian = cv2.Laplacian(img,cv2.CV_64F)
cv2_imshow(laplacian)

import cv2
from google.colab.patches import cv2_imshow
img=cv2.imread('/content/dha2.jpg')
sobelx=cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
cv2_imshow(sobelx)
sobely=cv2.Sobel(img,cv2.CV_64F,0,1,ksize=1)
cv2_imshow(sobely)

scharr_x=cv2.Scharr(img,cv2.CV_64F,1,0)
cv2_imshow(scharr_x)
scharr_y=cv2.Scharr(img,cv2.CV_64F,0,1)
scharr_combined=cv2.bitwise_or(scharr_x,scharr_y)
cv2_imshow(scharr_combined)
cv2_imshow(scharr_y)

import numpy as np
from google.colab.patches import cv2_imshow
img=cv2.imread('/content/dha2.jpg')
roberts_x=np.array([[1,0],[0,-1]],dtype=np.float32)
roberts_y=np.array([[0,1],[-1,0]],dtype=np.float32)
roberts_x_img=cv2.filter2D(img,-1,roberts_x)
roberts_y_img=cv2.filter2D(img,-1,roberts_y)
edge_x=cv2.filter2D(img,-1,roberts_x)
edge_y=cv2.filter2D(img,-1,roberts_y)
edges=cv2.addWeighted(np.abs(edge_x),0.5,np.abs(edge_y),0.5,0)
cv2_imshow(edges)

img=cv2.imread('/content/dha2.jpg',cv2.IMREAD_GRAYSCALE)
prewitt_x=np.array([[-1,0,1],[-1,0,1],[-1,0,1]],dtype=np.float32)
prewitt_y=np.array([[-1,-1,-1],[0,0,0],[1,1,1]],dtype=np.float32)
prewitt_x_img=cv2.filter2D(img,-1,prewitt_x)
edge_x=cv2.filter2D(img,-1,prewitt_x)
edge_y=cv2.filter2D(img,-1,prewitt_y)
edges=cv2.addWeighted(np.abs(edge_x),0.5,np.abs(edge_y),0.5,0)
cv2_imshow(edges)

import cv2
from google.colab.patches import cv2_imshow
img=cv2.imread('/content/dha2.jpg')
low_threshold=100
high_threshold=200
edges=cv2.Canny(img,low_threshold,high_threshold)
cv2_imshow(edges)

